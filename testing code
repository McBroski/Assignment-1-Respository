/**
 * Jentacular Gent
 * Rodeo Stampede 3D
 * 
 * WARNING: This game is very resource-intensive!
**/

/**DELAG**/
var delag = false; // If the game gets slow and laggy, change this to true to remove some graphical features
/**DELAG**/

/**
    ===INSTRUCTIONS===
         * Click and HOLD mouse button down to steer animal
         * Dodge animals and obstacles
         * 
         * Let go of the mouse = jump off animal
         * Jump off animal = dotted circle around the player
         * Press and HOLD mouse while animal in circle = jump onto it
         * Fall on the floor = you lose!
         * 
         * Ride buffalo = regular animal
         * Ride elephant = smash other animals in the way!
         * Ride ostrich = SPEED
         * 
         * Elephant will angrily buck you off after a while!
    ===INSTRUCTIONS===
**/

// {
var Vnew = function(x, y, z) { // New vector
    if(y === undefined) {
        return {
            x: x,
            y: x,
            z: x,
        };
    }
    if(z === undefined) {
        return {
            x: x,
            y: y,
        };
    }
    return {
        x: x,
        y: y,
        z: z,
    };
};
var Vadd = function(v, v2) { // Add vectors
    return {
        x: v.x + v2.x,
        y: v.y + v2.y,
        z: v.z + v2.z,
    };
};
var Vsub = function(v, v2) { // Subtract vectors
    return {
        x: v.x - v2.x,
        y: v.y - v2.y,
        z: v.z - v2.z,
    };
};
var Vdiv = function(v, v2) { // Divide vectors
    return {
        x: v.x / v2.x,
        y: v.y / v2.y,
        z: v.z / v2.z,
    };
};
var Vmult = function(v, v2) { // Multiply vectors
    return {
        x: v.x * v2.x,
        y: v.y * v2.y,
        z: v.z * v2.z,
    };
};
var Vdot = function(v, v2) { // Dot product
    if(v.z === undefined) {
        return v.x * v2.x + v.y * v2.y;
    }
    return v.x * v2.x + v.y * v2.y + v.z * v2.z;
};
var Vcross = function(v, v2) { // Cross product
    return {
        x: v.y * v2.z - v.z * v2.y,
        y: v.z * v2.x - v.x * v2.z,
        z: v.x * v2.y - v.y * v2.x
    };
};
var Vdist = function(v, v2) {
    if(v.z === undefined) {
        return abs(sqrt(sq(v.x - v2.x) + sq(v.y - v2.y)));
    }
    return abs(sqrt(sq(v.x - v2.x) + sq(v.y - v2.y) + sq(v.z - v2.z)));
};
var Vlength = function(v) {
    return Vdist(v, Vnew(0));
};
var Vnormalize = function(v) {
    var distance = Vdist(v, Vnew(0));
    return Vdiv(v, Vnew(distance));
};
// } Simple vector library

// Radians to Degrees
var r2d = 180/PI;
var d2r = PI/180;

// Rotate
var yRotate = function(theta, x, y, z) {
    var rotation = Math.atan2(z, x) * r2d + theta;
    var distance = dist(x, z, 0, 0);
    return Vnew(Math.cos(rotation * d2r) * distance, y, Math.sin(rotation * d2r) * distance);
};
var xRotate = function(theta, x, y, z) {
    var rotation = Math.atan2(z, y) * r2d + theta;
    var distance = dist(y, z, 0, 0);
    return Vnew(x, Math.cos(rotation * d2r) * distance, Math.sin(rotation * d2r) * distance);
};
var zRotate = function(theta, x, y, z) {
    var rotation = Math.atan2(y, x) * r2d + theta;
    var distance = dist(x, y, 0, 0);
    return Vnew(Math.cos(rotation * d2r) * distance, Math.sin(rotation * d2r) * distance, z);
};

// Distance without sqrt
var sqDist = function() {
    var a = arguments;
    if(a.length === 4) {
        return (a[2]-a[0])*(a[2]-a[0]) + (a[3]-a[1])*(a[3]-a[1]);
    }
    else {
        return (a[3]-a[0])*(a[3]-a[0]) + (a[4]-a[1])*(a[4]-a[1]) + (a[5]-a[2])*(a[5]-a[2]);
    }
};

// Rectangle Rectangle
var rrCol = function(x, y, w, h, x2, y2, w2, h2) {
    return x < x2 + w2 && y < y2 + h2 && x > x2 - w && y > y2 - h;
};

// Cuboid in cuboid
var ccCol = function(x, y, z, w, h, d, x2, y2, z2, w2, h2, d2) {
    return x > x2 - w && y > y2 - h && z > z2 - d && x < x2 + w2 && y < y2 + h2 && z < z2 + d2;
};

// Copy
var copyObj = function(obj) {
    var newObj = {};
    for(var i in obj) {
        newObj[i] = obj[i];
    }
    return newObj;
};

// Walls
var randomWall = Math.random();
var walls = function(z) {
    return [noise(z * 0.001 + randomWall) * 600 - 470, -noise(-z * 0.001 + randomWall) * 600 + 700];
};

// Sprites
var sprites = {
    logo: function() {
        fill(255);
        noStroke();
        rect(0, 50, 100, 150, 0, 0, 5, 5);
        fill(240);
        quad(0, 50, 100, 50, 90, 20, 10, 20);
        fill(230);
        rect(10, 0, 80, 20, 5, 5, 0, 0);
        fill(0, 200, 255);
        rect(0, 100, 100, 50);
        fill(255);
        textSize(40);
        textAlign(CENTER, CENTER);
        text("JG", 50, 125);
        return get(0, 0, 100, 200);
    },
    logosans: function() {
        fill(255);
        noStroke();
        rect(0, 50, 100, 150, 0, 0, 5, 5);
        fill(240);
        quad(0, 50, 100, 50, 90, 20, 10, 20);
        fill(230);
        rect(10, 0, 80, 20, 5, 5, 0, 0);
        fill(0, 200, 255);
        rect(0, 100, 100, 50);
        return get(0, 0, 100, 200);
    },
    init: function(key) {
        background(0, 0, 0, 0);
        this[key] = this[key]();
    },
};
var sn = ['logo', 'logosans'];
var s = 0;

// Constants
var SQRT2 = sqrt(2);

// Globals
var keys = {};
var keysr = {};
var clicked = false;
var look;
var shake = 0;
var scene = "intro";
textFont(createFont("Trebuchet MS"));

// Logo variables {
var logotx = width / 2;
var logoty = height * 0.3;
var logoy = 0;
var logoyvel = height / 11;
var logo = 0;
var logoinit = false;
// }
// Created with variables {
var withAnim = 0;
// }
// Game variables {
var started = 0;
var dead = 0;
var highscore = 0;
var score = 0;
// }

// Fader
var Fader = function() {
    this.color = color(0, 0, 0);
    this.opacity = 0;
    this.fading = false;
    this.speed = 0;
    this.screen = 0;
    this.fade = function(speed, col, screen) {
        if(!this.fading) {
            this.speed = speed;
            this.color = col;
            this.screen = screen;
            this.opacity = 0;
            this.fading = true;
        }
    };
    this.display = function() {
        fill(this.color, this.opacity);
        if(this.fading) {
            if(this.opacity >= 255) {
                this.speed = -abs(this.speed);
                scene = this.screen;
            }
            if(this.opacity < 0) {
                this.speed = 0;
                this.opacity = 0;
                this.fading = false;
            }
            this.opacity += this.speed;
        }
        noStroke();
        rect(-1, -1, width + 2, height + 2);
    };
};
var fader = new Fader();

// Globals
var clipStart = 50;
var clicked = false;
var FOV = 300;
var orthographic = true;
orthographic = false;
var ground = 500;
var sun = Vnew(1.5, -2.5, 1);
sun = Vnormalize(sun);
var player;

// Camera
var cam = {
    x: 0,
    y: 0,
    z: 0,
    yaw: 20,
    pitch: 70,
};

// Clipping
var clipRay = function(o, d) {
    var r = Vsub(d, o);
    return Vadd(o, Vmult(r, Vnew((clipStart - o.z) / r.z)));
};
var clipTri = function(x1, y1, z1, x2, y2, z2, x3, y3, z3) {
    var p = Vnew(x1, y1, z1);
    var p2 = Vnew(x2, y2, z2);
    var p3 = Vnew(x3, y3, z3);
    if(z1 <= clipStart) {
        if(z2 > clipStart && z3 > clipStart) {
            return [p3, p2, clipRay(p2, p), clipRay(p3, p)];
        }
        else if(z2 <= clipStart) {
            return [p3, clipRay(p3, p), clipRay(p3, p2)];
        }
        else if(z3 <= clipStart) {
            return [p2, clipRay(p2, p), clipRay(p2, p3)];
        }
    }
    if(z2 <= clipStart) {
        if(z1 > clipStart && z3 > clipStart) {
            return [p, p3, clipRay(p3, p2), clipRay(p, p2)];
        }
        else if(z3 <= clipStart) {
            return [p, clipRay(p, p2), clipRay(p, p3)];
        }
    }
    return [p, p2, clipRay(p2, p3), clipRay(p, p3)];
};

// Floorcast
var cast = function(pos, dir) {
    var d = (ground - pos.y) / dir.y;
    return Vadd(pos, Vmult(dir, Vnew(d)));
};

// Triangles
var tris = [];
var tri = function(v, v2, v3, n, r, g, b, a) {
    tris.push({
        v: v,
        v2: v2,
        v3: v3,
        pv: v,
        pv2: v2,
        pv3: v3,
        get ax() { return (this.v.x + this.v2.x + this.v3.x) / 3; },
        get ay() { return (this.v.y + this.v2.y + this.v3.y) / 3; },
        get az() { return (this.v.z + this.v2.z + this.v3.z) / 3; },
        normal: n,
        r: r,
        g: g,
        b: b,
        a: a,
    });
};

// Blocks
var block = function(x, y, z, w, h, d, R, G, B, A) {
    var b = {
        x: x,
        y: y,
        z: z,
        width: w,
        height: h,
        depth: d,
    };
    var btl = Vnew(b.x, b.y, b.z + b.depth);
    var btr = Vnew(b.x + b.width, b.y, b.z + b.depth);
    var bbl = Vnew(b.x, b.y + b.height, b.z + b.depth);
    var bbr = Vnew(b.x + b.width, b.y + b.height, b.z + b.depth);
    var ftl = Vnew(b.x, b.y, b.z);
    var ftr = Vnew(b.x + b.width, b.y, b.z);
    var fbl = Vnew(b.x, b.y + b.height, b.z);
    var fbr = Vnew(b.x + b.width, b.y + b.height, b.z);
    var n = Vnew(0, 0, -1);
    tri(ftl, ftr, fbr, n, R, G, B, A); // front
    tri(ftl, fbl, fbr, n, R, G, B, A);
    var n = Vnew(0, 0, 1);
    tri(btl, btr, bbr, n, R, G, B, A); // back
    tri(btl, bbl, bbr, n, R, G, B, A);
    var n = Vnew(0, -1, 0);
    tri(btl, btr, ftr, n, R, G, B, A); // top
    tri(btl, ftl, ftr, n, R, G, B, A);
    var n = Vnew(0, 1, 0);
    tri(bbl, bbr, fbr, n, R, G, B, A); // bottom
    tri(bbl, fbl, fbr, n, R, G, B, A);
    var n = Vnew(-1, 0, 0);
    tri(btl, bbl, fbl, n, R, G, B, A); // left
    tri(btl, ftl, fbl, n, R, G, B, A);
    var n = Vnew(1, 0, 0);
    tri(btr, bbr, fbr, n, R, G, B, A); // right
    tri(btr, ftr, fbr, n, R, G, B, A);
};

// Rotate block
var rotateBlock = function(x, y, z, px, py, pz, n) {
    if(n === undefined) {
        n = 1;
    }
    for(var i = tris.length - 1; i > tris.length - 1 - 12 * n; i --) {
        var t = tris[i];
        
        t.v = Vsub(t.v, Vnew(px, py, pz));
        t.v2 = Vsub(t.v2, Vnew(px, py, pz));
        t.v3 = Vsub(t.v3, Vnew(px, py, pz));
        
        if(x !== 0) {
            t.v = xRotate(x, t.v.x, t.v.y, t.v.z);
            t.v2 = xRotate(x, t.v2.x, t.v2.y, t.v2.z);
            t.v3 = xRotate(x, t.v3.x, t.v3.y, t.v3.z);
            t.normal = xRotate(x, t.normal.x, t.normal.y, t.normal.z);
        }
        if(y !== 0) {
            t.v = yRotate(y, t.v.x, t.v.y, t.v.z);
            t.v2 = yRotate(y, t.v2.x, t.v2.y, t.v2.z);
            t.v3 = yRotate(y, t.v3.x, t.v3.y, t.v3.z);
            t.normal = yRotate(y, t.normal.x, t.normal.y, t.normal.z);
        }
        if(z !== 0) {
            t.v = zRotate(z, t.v.x, t.v.y, t.v.z);
            t.v2 = zRotate(z, t.v2.x, t.v2.y, t.v2.z);
            t.v3 = zRotate(z, t.v3.x, t.v3.y, t.v3.z);
            t.normal = zRotate(z, t.normal.x, t.normal.y, t.normal.z);
        }
        
        t.v = Vadd(t.v, Vnew(px, py, pz));
        t.v2 = Vadd(t.v2, Vnew(px, py, pz));
        t.v3 = Vadd(t.v3, Vnew(px, py, pz));
        t.pv = t.v;
        t.pv2 = t.v2;
        t.pv3 = t.v3;
    }
};

// Particles
var particles = [];
var Dust = function(x, y, z) {
    particles.push({
        x: x,
        y: y,
        z: z,
        px: x,
        py: y,
        pz: z,
        size: Math.random() * 10 + 20,
        time: Math.random() * 50,
        r: Math.random() * 40 + 100,
        g: Math.random() * 50 + 50,
        b: Math.random() * 20 + 20,
        xVel: Math.random() * 4 - 2,
        yVel: Math.random() * 2 - 2,
        zVel: Math.random() * 4 - 5,
        display: function() {
            this.px += this.xVel;
            this.py += this.yVel;
            this.pz += this.zVel;
            this.x = this.px - cam.x;
            this.y = this.py - cam.y;
            this.z = this.pz - cam.z;
            var rot = yRotate(cam.yaw, this.x, this.y, this.z);
            rot = xRotate(cam.pitch, rot.x, rot.y, rot.z);
            this.x = rot.x;
            this.y = rot.y;
            this.z = rot.z;
            this.time += this.die || 20;
            noStroke();
            fill(this.r, this.g, this.b, 255 - this.time);
            var d = this.z / FOV;
            ellipse(this.x / d, this.y / d, this.size / d, this.size / d);
        },
    });
};

// Obstacles
var obstacles = [];
var Rock = function() {
    this.width = Math.random() * 100 + 100;
    this.height = Math.random() * 100 + 100;
    this.depth = Math.random() * 200 + 100;
    this.x = Math.random() * 200 - 100;
    this.y = ground - this.height;
    this.z = player.z + 1400;
    this.rot = Math.random() * 40 - 20;
    this.display = function() {
        block(this.x, this.y, this.z, this.width, this.height, this.depth, 240, 200, 90);
        rotateBlock(0, this.rot, 0, this.x + this.width / 2, this.y + this.height / 2, this.z + this.depth / 2);
        if(this.z < player.z - 600) {
            this.dead = true;
        }
    };
};
var Tree = function() {
    this.width = Math.random() * 100 + 50;
    this.height = Math.random() * 100 + 50;
    this.depth = Math.random() * 100 + 50;
    this.x = Math.random() * 200 - 100;
    this.y = ground - this.height;
    this.z = player.z + 1400;
    this.rot = Math.random() * 40 - 20;
    this.log = random(20, 40);
    this.display = function() {
        block(this.x + this.width / 2 - this.log / 2, this.y + this.height / 2, this.z + this.height / 2 - this.log / 2, this.log, this.height / 2, this.log, 130, 90, 20);
        block(this.x, this.y, this.z, this.width, this.height / 2, this.depth, 0, 255, 0);
        rotateBlock(0, this.rot, 0, this.x + this.width / 2, this.y + this.height / 2, this.z + this.depth / 2, 2);
        if(this.z < player.z - 500) {
            this.dead = true;
        }
    };
};

// Animals
var animals = [];
var Buffalo = function() {
    var w = walls(player.z - 400);
    this.x = random(w[0] + 25, w[1] - 25);
    this.y = ground - 50;
    this.z = player.z + 1400;
    this.width = 50;
    this.height = 50;
    this.depth = 150;
    this.xVel = 0;
    this.vel = 0;
    this.zVel = Math.random() * 5 + 10;
    this.pzVel = this.zVel;
    this.free = true;
    this.id = Math.random() * 10;
    this.color = Math.random() * 100 + 100;
    var badID = false;
    for(var i = 0; i < animals.length; i ++) {
        if(badID) {
            continue;
        }
        var a = animals[i];
        if(a === this || a.id !== this.id) {
            continue;
        }
        badID = true;
    }
    while(badID === true) {
        this.id = Math.random() * 10;
        for(var i = 0; i < animals.length; i ++) {
            var a = animals[i];
            if(a === this || a.id !== this.id) {
                continue;
            }
            badID = true;
        }
    }
    this.col = function(xVel, zVel) {
        if(this.id === player.riding) {
            this.free = false;
        }
        var w = walls(this.z + this.depth / 2);
        if(this.x < w[0] + this.width / 2) {
            this.x = w[0] + this.width / 2;
            this.xVel = 0;
        }
        if(this.x > w[1] - this.width * 1.5) {
            this.x = w[1] - this.width * 1.5;
            this.xVel = 0;
        }
        if(this.id !== player.id) {
            for(var i = 0; i < animals.length; i ++) {
                var a = animals[i];
                if(a === this) {
                    continue;
                }
                if(!ccCol(this.x, this.y, this.z, this.width, this.height, this.depth, a.x, a.y, a.z, a.width, a.height, a.depth)) {
                    continue;
                }
                this.xVel += (this.x + this.width / 2 - a.x - a.width / 2) / 10;
            }
        }
        for(var i = 0; i < obstacles.length; i ++) {
            var o = obstacles[i];
            if(!ccCol(this.x, this.y, this.z, this.width, this.height, this.depth, o.x, o.y, o.z, o.width, o.height, o.depth)) {
                continue;
            }
            this.xVel += (this.x + this.width / 2 - o.x - o.width / 2) / 10;
        }
    };
    this.update = function() {
        if(this.id === player.riding && !this.dead) {
            this.xVel = player.xVel;
            player.x = this.x;
            player.zVel = this.zVel;
            player.z = this.z;
        }
        else {
            this.vel += (Math.random() * 40 - 20 - this.vel) / 10;
            this.xVel += (this.vel - this.xVel) / 10;
        }
        this.x += this.xVel;
        this.col(this.xVel, 0);
        this.z += this.zVel;
        this.col(0, this.zVel);
        if(this.z > player.z + 1500 || this.z < player.z - 500) {
            this.dead = true;
        }
    };
    this.display = function() {
        this.update();
        var r = this.color;
        var g = this.color;
        var b = this.color;
        this.zVel = this.pzVel;
        if(this.id === player.riding) {
            this.zVel *= 1.5;
        }
        block(this.x, this.y, this.z, this.width, this.height * 2/3, this.depth * 3/5, r, g, b);
        
        // Legs
        var legArc = 2;
        var legDiameter = 20;
        
        block(this.x, this.y + this.height * 2/3, this.z, legDiameter, this.height * 1/3, legDiameter, r, g, b);
        rotateBlock(cos(frameCount * 20) * this.zVel * legArc, 0, 0,
            this.x + legDiameter / 2,
            this.y + this.height * 2/3,
            this.z + legDiameter / 2);
        
        block(this.x + this.width - legDiameter, this.y + this.height * 2/3, this.z, legDiameter, this.height * 1/3, legDiameter, r, g, b);
        rotateBlock(sin(frameCount * 20) * this.zVel * legArc, 0, 0,
            this.x + legDiameter / 2, 
            this.y + this.height * 2/3,
            this.z + legDiameter / 2);
        
        block(this.x + this.width - legDiameter, this.y + this.height * 2/3, this.z + this.depth * 3/5 - legDiameter, legDiameter, this.height * 1/3, legDiameter, r, g, b);
        rotateBlock(cos(frameCount * 20 - 30) * this.zVel * legArc, 0, 0,
            this.x + legDiameter / 2,
            this.y + this.height * 2/3,
            this.z + this.depth * 3/5 - legDiameter / 2);
        
        block(this.x, this.y + this.height * 2/3, this.z + this.depth * 3/5 - legDiameter, legDiameter, this.height * 1/3, legDiameter, r, g, b);
        rotateBlock(cos(frameCount * 20 + 30) * this.zVel * legArc, 0, 0,
            this.x + legDiameter / 2,
            this.y + this.height * 2/3,
            this.z + this.depth * 3/5 - legDiameter / 2);
        // Legs
        
        block(this.x + this.width * 1/5, this.y + this.height / 5, this.z + this.depth * 3/5, this.width * 3/5, this.height, this.depth * 1/5, r, g, b);

        block(this.x + this.width * 1/10, this.y + this.height / 3, this.z + this.depth * 4/5, this.width * 1/5, this.depth * 1/10, this.depth * 2/10, 255, 255, 255);

        block(this.x + this.width * 7/10, this.y + this.height / 3, this.z + this.depth * 4/5, this.width * 1/5, this.depth * 1/10, this.depth * 2/10, 255, 255, 255);
        rotateBlock(0, constrain(-this.xVel * 2, -40, 40), 0, this.x + this.width / 2, this.y + this.height / 2, this.z + this.depth * 3/10, 8);
        
        if(!delag && frameCount % 5 === 0) {
            Dust(this.x + Math.random() * this.width, this.y + this.height, this.z);
        }
    };
};
var Elephant = function() {
    var w = walls(player.z - 400);
    this.x = random(w[0] + 25, w[1] - 25);
    this.y = ground - 100;
    this.z = player.z + 1400;
    this.width = 75;
    this.height = 100;
    this.depth = 200;
    this.xVel = 0;
    this.zVel = Math.random() * 5 + 10;
    this.pzVel = this.zVel;
    this.free = true;
    this.id = Math.random() * 10;
    this.color = Math.random() * 50 + 150;
    this.isElephant = true;
    this.vel = 0;
    this.time = 0;
    if(Math.random() * 10 < 5) {
        this.color = "brown";
    }
    var badID = false;
    for(var i = 0; i < animals.length; i ++) {
        if(badID) {
            continue;
        }
        var a = animals[i];
        if(a === this || a.id !== this.id) {
            continue;
        }
        badID = true;
    }
    while(badID === true) {
        this.id = Math.random() * 10;
        for(var i = 0; i < animals.length; i ++) {
            var a = animals[i];
            if(a === this || a.id !== this.id) {
                continue;
            }
            badID = true;
        }
    }
    this.col = function(xVel, zVel) {
        if(this.id === player.riding) {
            this.free = false;
        }
        var w = walls(this.z + this.depth / 2);
        if(this.x < w[0] + this.width / 2) {
            this.x = w[0] + this.width / 2;
            this.xVel = 0;
        }
        if(this.x > w[1] - this.width * 1.5) {
            this.x = w[1] - this.width * 1.5;
            this.xVel = 0;
        }
        if(this.id !== player.id) {
            for(var i = 0; i < animals.length; i ++) {
                var a = animals[i];
                if(a === this) {
                    continue;
                }
                if(!ccCol(this.x, this.y, this.z, this.width, this.height, this.depth, a.x, a.y, a.z, a.width, a.height, a.depth)) {
                    continue;
                }
                this.xVel += (this.x + this.width / 2 - a.x - a.width / 2) / 10;
            }
        }
        for(var i = 0; i < obstacles.length; i ++) {
            var o = obstacles[i];
            if(!ccCol(this.x, this.y, this.z, this.width, this.height, this.depth, o.x, o.y, o.z, o.width, o.height, o.depth)) {
                continue;
            }
            this.xVel += (this.x + this.width / 2 - o.x - o.width / 2) / 10;
        }
    };
    this.update = function() {
        if(this.id === player.riding && !this.dead) {
            this.xVel = player.xVel;
            player.x = this.x;
            player.zVel = this.zVel;
            player.z = this.z;
        }
        else {
            this.vel += (Math.random() * 40 - 20 - this.vel) / 10;
            this.xVel += (this.vel - this.xVel) / 10;
        }
        this.x += this.xVel;
        this.col(this.xVel, 0);
        this.z += this.zVel;
        this.col(0, this.zVel);
        if(this.z > player.z + 1500 || this.z < player.z - 600) {
            this.dead = true;
        }
    };
    this.display = function() {
        this.update();
        var r = this.color;
        var g = this.color;
        var b = this.color;
        if(this.color === "brown") {
            r = 190;
            g = 160;
            b = 80;
        }
        this.zVel = this.pzVel;
        if(this.id === player.riding) {
            this.zVel *= 1.75;
            this.time += 1;
            r = map(this.time, 0, 200, r, 255);
            g = map(this.time, 0, 200, g, 0);
            b = map(this.time, 0, 200, b, 0);
        }
        block(this.x, this.y, this.z, this.width, this.height * 2/5, this.depth * 3/5, r, g, b);
        
        // Legs
        var legArc = 2;
        var legDiameter = 30;
        
        block(this.x, this.y + this.height * 2/5, this.z, legDiameter, this.height * 3/5, legDiameter, r, g, b);
        rotateBlock(cos(frameCount * 20) * this.zVel * legArc, 0, 0,
            this.x + legDiameter / 2,
            this.y + this.height * 2/5,
            this.z + legDiameter / 2);
        
        block(this.x + this.width - legDiameter, this.y + this.height * 2/5, this.z, legDiameter, this.height * 3/5, legDiameter, r, g, b);
        rotateBlock(sin(frameCount * 20) * this.zVel * legArc, 0, 0,
            this.x + legDiameter / 2, 
            this.y + this.height * 2/5,
            this.z + legDiameter / 2);
        
        block(this.x + this.width - legDiameter, this.y + this.height * 2/5, this.z + this.depth * 3/5 - legDiameter, legDiameter, this.height * 3/5, legDiameter, r, g, b);
        rotateBlock(cos(frameCount * 20 - 30) * this.zVel * legArc, 0, 0,
            this.x + legDiameter / 2,
            this.y + this.height * 2/5,
            this.z + this.depth * 3/5 - legDiameter / 2);
        
        block(this.x, this.y + this.height * 3/5, this.z + this.depth * 3/5 - legDiameter, legDiameter, this.height * 3/5, legDiameter, r, g, b);
        rotateBlock(cos(frameCount * 20 + 30) * this.zVel * legArc, 0, 0,
            this.x + legDiameter / 2,
            this.y + this.height * 2/5,
            this.z + this.depth * 3/5 - legDiameter / 2);
        // Legs
        
        block(this.x + this.width * 1/5, this.y - this.height / 10, this.z + this.depth * 3/5, this.width * 3/5, this.height * 2/5, this.depth * 2/5, r, g, b);

        block(this.x - 20, this.y - this.height / 10, this.z + this.depth * 4/5, 50, 50, 10, r, g, b);

        block(this.x + this.width - 30, this.y - this.height / 10, this.z + this.depth * 4/5, 50, 50, 10, r, g, b);
        var trunkRadius = 20;
        block(this.x + this.width / 2 - trunkRadius / 2, this.y - this.height / 10 + this.height * 2/10 - trunkRadius / 2, this.z + this.depth - trunkRadius / 2, trunkRadius, trunkRadius, 100, r, g, b);
        rotateBlock(-20, 0, 0, this.x + this.width / 2, this.y - this.height / 10 + this.height * 2/10, this.z + this.depth);
        rotateBlock(0, constrain(-this.xVel * 2, -40, 40), 0, this.x + this.width / 2, this.y + this.height / 2, this.z + this.depth * 3/10, 9);
        
        if(!delag && frameCount % 5 === 0) {
            Dust(this.x + Math.random() * this.width, this.y + this.height, this.z);
        }
    };
};
var Ostrich = function() {
    var w = walls(player.z - 400);
    this.x = random(w[0] + 25, w[1] - 25);
    this.y = ground - 100;
    this.z = player.z + 1400;
    this.width = 50;
    this.height = 100;
    this.depth = 80;
    this.xVel = 0;
    this.vel = 0;
    this.zVel = Math.random() * 5 + 10;
    this.pzVel = this.zVel;
    this.free = true;
    this.id = Math.random() * 10;
    var badID = false;
    for(var i = 0; i < animals.length; i ++) {
        if(badID) {
            continue;
        }
        var a = animals[i];
        if(a === this || a.id !== this.id) {
            continue;
        }
        badID = true;
    }
    while(badID === true) {
        this.id = Math.random() * 10;
        for(var i = 0; i < animals.length; i ++) {
            var a = animals[i];
            if(a === this || a.id !== this.id) {
                continue;
            }
            badID = true;
        }
    }
    this.col = function(xVel, zVel) {
        if(this.id === player.riding) {
            this.free = false;
        }
        var w = walls(this.z + this.depth / 2);
        if(this.x < w[0] + this.width / 2) {
            this.x = w[0] + this.width / 2;
            this.xVel = 0;
        }
        if(this.x > w[1] - this.width * 1.5) {
            this.x = w[1] - this.width * 1.5;
            this.xVel = 0;
        }
        if(this.id !== player.id) {
            for(var i = 0; i < animals.length; i ++) {
                var a = animals[i];
                if(a === this) {
                    continue;
                }
                if(!ccCol(this.x, this.y, this.z, this.width, this.height, this.depth, a.x, a.y, a.z, a.width, a.height, a.depth)) {
                    continue;
                }
                this.xVel += (this.x + this.width / 2 - a.x - a.width / 2) / 10;
            }
        }
        for(var i = 0; i < obstacles.length; i ++) {
            var o = obstacles[i];
            if(!ccCol(this.x, this.y, this.z, this.width, this.height, this.depth, o.x, o.y, o.z, o.width, o.height, o.depth)) {
                continue;
            }
            this.xVel += (this.x + this.width / 2 - o.x - o.width / 2) / 10;
        }
    };
    this.update = function() {
        if(this.id === player.riding && !this.dead) {
            this.xVel = player.xVel;
            player.x = this.x;
            player.zVel = this.zVel;
            player.z = this.z;
        }
        else {
            this.vel += (Math.random() * 40 - 20 - this.vel) / 10;
            this.xVel += (this.vel - this.xVel) / 10;
        }
        this.x += this.xVel;
        this.col(this.xVel, 0);
        this.z += this.zVel;
        this.col(0, this.zVel);
        if(this.z > player.z + 1500 || this.z < player.z - 500) {
            this.dead = true;
        }
    };
    this.display = function() {
        this.update();
        this.zVel = this.pzVel;
        if(this.id === player.riding) {
            this.zVel *= 2;
        }
        block(this.x, this.y, this.z, this.width, this.height * 1/3, this.depth, 0, 0, 0);
        
        // Legs
        var legArc = 2;
        var legDiameter = 10;
        
        block(this.x, this.y + this.height * 1/3, this.z + this.depth / 2 - legDiameter / 10, legDiameter, this.height * 2/3, legDiameter, 255, 100, 100);
        rotateBlock(cos(frameCount * 20) * this.zVel * legArc, 0, 0,
            this.x + legDiameter / 2,
            this.y + this.height * 1/3,
            this.z + this.depth / 2 - legDiameter / 2);
        
        block(this.x + this.width - legDiameter, this.y + this.height * 1/3, this.z + this.depth / 2 - legDiameter / 10, legDiameter, this.height * 2/3, legDiameter, 255, 100, 100);
        rotateBlock(sin(frameCount * 20) * this.zVel * legArc, 0, 0,
            this.x + legDiameter / 2, 
            this.y + this.height * 1/3,
            this.z + this.depth / 2 - legDiameter / 2);
        // Legs
        
        var neckRadius = 10;
        block(this.x + this.width / 2 - neckRadius, this.y - 50, this.z + this.depth - neckRadius, neckRadius * 2, 50, neckRadius * 2, 250, 200, 200);
        block(this.x + this.width / 2 - neckRadius, this.y - 50, this.z + this.depth - neckRadius, neckRadius * 2, 10, neckRadius * 4, 250, 200, 200);
        rotateBlock(-40, 0, 0,
            this.x + this.width / 2, this.y, this.z + this.depth, 2);
        rotateBlock(0, constrain(-this.xVel * 2, -40, 40), 0, this.x + this.width / 2, this.y + this.height / 2, this.z + this.depth * 3/10, 5);
        
        if(!delag && frameCount % 5 === 0) {
            Dust(this.x + Math.random() * this.width, this.y + this.height, this.z);
        }
    };
};

// Player
var player = {
    x: 0,
    y: ground - 50,
    z: 0,
    width: 50,
    height: 50,
    depth: 70,
    xVel: 0,
    yVel: 0,
    zVel: 20,
    riding: "none",
    jump: 0,
    fallRadius: 150,
    dead: false,
    landed: false,
    ride: "none",
    col: function(xVel, zVel) {
        var w = walls(this.z + this.depth / 2);
        if(this.x < w[0] + this.width / 2 || this.x > w[1] - this.width * 1.5) {
            this.x = this.x = constrain(this.x, w[0] + this.width / 2, w[1] - this.width * 1.5);
            this.xVel = 0;
        }
        this.ride = "none";
        if(this.riding !== "none") {
            this.ride = "none";
            for(var i = 0; i < animals.length; i ++) {
                if(this.ride !== "none") {
                    continue;
                }
                var a = animals[i];
                if(a.id !== this.riding) {
                    continue;
                }
                this.ride = a;
            }
            for(var i = 0; i < obstacles.length; i ++) {
                var o = obstacles[i];
                if(!ccCol(this.ride.x, this.ride.y, this.ride.z, this.ride.width, this.ride.height, this.ride.depth, o.x, o.y, o.z, o.width, o.height, o.depth)) {
                    continue;
                }
                if(zVel > 0) {
                    this.zVel = 0;
                    shake = 20;
                    var inc = 10;
                    if(delag) {
                        inc = 20;
                    }
                    for(var i = 0; i < 360; i += inc) {
                        Dust(this.x + this.width / 2, this.y + this.height, this.z + this.depth / 2);
                        var np = particles[particles.length - 1];
                        np.xVel = sin(i) * 10;
                        np.yVel = cos(i) * 10;
                        np.zVel = random(-5, 5);
                        np.time = 0;
                        np.die = 10;
                    }
                    this.landed = true;
                    this.dead = true;
                    dead = 0;
                    this.riding = "none";
                }
            }
            for(var i = 0; i < animals.length; i ++) {
                var a = animals[i];
                if(a.id === this.riding) {
                    continue;
                }
                if(!ccCol(this.ride.x, this.ride.y, this.ride.z, this.ride.width, this.ride.height, this.ride.depth, a.x, a.y, a.z, a.width, a.height, a.depth)) {
                    continue;
                }
                if(this.ride.isElephant) {
                    for(var j = 0; j < random(20, 30); j ++) {
                        Dust(a.x + a.width / 2, a.y + a.height / 2, a.z + a.depth / 2);
                        var np = particles[particles.length - 1];
                        np.xVel = random(-10, 10);
                        np.yVel = random(-10, 10);
                        np.zVel = random(-10, 10);
                        np.time = 0;
                        np.die = 10;
                    }
                    shake = 20;
                    animals.splice(i, 1);
                    i --;
                    continue;
                }
                else if(zVel > 0) {
                    this.zVel = 0;
                    shake = 20;
                    var inc = 10;
                    if(delag) {
                        inc = 20;
                    }
                    for(var i = 0; i < 360; i += inc) {
                        Dust(this.x + this.width / 2, this.y + this.height, this.z + this.depth / 2);
                        var np = particles[particles.length - 1];
                        np.xVel = sin(i) * 10;
                        np.yVel = cos(i) * 10;
                        np.zVel = random(-5, 5);
                        np.time = 0;
                        np.die = 10;
                    }
                    this.landed = true;
                    this.dead = true;
                    dead = 0;
                    this.riding = "none";
                }
            }
        }
        else {
            for(var i = 0; i < obstacles.length; i ++) {
                var o = obstacles[i];
                if(!ccCol(this.x, this.y, this.z, this.width, this.height, this.depth, o.x, o.y, o.z, o.width, o.height, o.depth)) {
                    continue;
                }
                if(zVel > 0) {
                    this.zVel = 0;
                    shake = 20;
                    var inc = 10;
                    if(delag) {
                        inc = 20;
                    }
                    for(var i = 0; i < 360; i += inc) {
                        Dust(this.x + this.width / 2, this.y + this.height, this.z + this.depth / 2);
                        var np = particles[particles.length - 1];
                        np.xVel = sin(i) * 10;
                        np.yVel = cos(i) * 10;
                        np.zVel = random(-5, 5);
                        np.time = 0;
                        np.die = 10;
                    }
                    this.landed = true;
                    this.dead = true;
                    dead = 0;
                }
            }
        }
    },
    update: function() {
        if(this.ride.isElephant && this.ride.time > 200) {
            this.riding = "none";
        }
        if(mouseIsPressed && this.riding !== "none") {
            this.xVel += ((mouseX - pmouseX) * 4 - this.xVel) / 5;
            this.jump = 0;
            this.y = ground - this.height;
            this.yVel = 0;
        }
        else if(mouseIsPressed && this.y < ground - this.height) {
            var dMin = 10000000;
            var riding = "none";
            for(var i = 0; i < animals.length; i ++) {
                var a = animals[i];
                if(!a.free) {
                    continue;
                }
                var d = sqDist(this.x + this.width / 2, this.z + this.depth / 2, a.x + a.width / 2, a.z + a.depth / 2);
                if(d > dMin || d > this.fallRadius*this.fallRadius) {
                    continue;
                }
                riding = a.id;
                dMin = d;
            }
            this.riding = riding;
            this.yVel += 0.3;
        }
        else {
            if(this.jump === 0) {
                var done = false;
                for(var i = 0; i < animals.length; i ++) {
                    if(done) {
                        continue;
                    }
                    var a = animals[i];
                    if(a.id !== this.riding) {
                        continue;
                    }
                    a.zVel *= 0.75;
                    done = true;
                }
                this.zVel *= 1.25;
                this.yVel = -10;
                this.y = ground - this.height - 1;
                this.jump += 1;
            }
            this.yVel += 0.3;
            this.riding = "none";
        }
        this.x += this.xVel;
        this.col(this.xVel, 0);
        this.y += this.yVel;
        if(this.y > ground - this.height) {
            if(!this.landed) {
                shake = 15;
                var inc = 20;
                if(delag) {
                    inc = 30;
                }
                for(var i = 0; i < 360; i += inc) {
                    Dust(this.x + this.width / 2, this.y + this.height, this.z + this.depth / 2);
                    var np = particles[particles.length - 1];
                    np.xVel = sin(i) * 10;
                    np.zVel = cos(i) * 10 + this.zVel / 2;
                    np.time = 0;
                    np.die = 10;
                }
                this.landed = true;
                this.dead = true;
                dead = 0;
                this.riding = "none";
            }
            this.y = ground - this.height;
            this.xVel *= 0.9;
            this.zVel *= 0.9;
            this.yVel = 0;
        }
        if(this.y < ground - this.height && this.riding === "none") {
            for(var i = 0; i < 360; i += 20) {
                tri(
                    Vnew(this.x + this.width / 2 + cos(i) * this.fallRadius, ground - 2, this.z + this.depth / 2 + sin(i) * this.fallRadius),
                    Vnew(this.x + this.width / 2 + cos(i + 5) * this.fallRadius, ground - 2, this.z + this.depth / 2 + sin(i + 5) * this.fallRadius),
                    Vnew(this.x + this.width / 2 + cos(i - 5) * this.fallRadius, ground - 2, this.z + this.depth / 2 + sin(i - 5) * this.fallRadius),
                    1,
                    10000, 10000, 0
                );
            }
        }
        this.z += this.zVel;
        this.col(0, this.zVel);
        score += this.zVel;
        highscore = max(score, highscore);
    },
    display: function() {
        if(started === 0) {
            
        }
        else {
            if(!this.dead) {
                this.update();
            }
            if(this.riding === "none") {
                block(this.x + 5, this.y + this.height - 10, this.z + 30, 10, 50, 10, 0, 50, 255);
                rotateBlock(0, 0, 20, this.x + 10, this.y + this.height - 5, this.z + 30 + 5);
                block(this.x + this.width - 20, this.y + this.height - 5, this.z + 30, 10, 50, 10, 0, 50, 255);
                rotateBlock(0, 0, -20, this.x + this.width - 15, this.y + this.height - 5, this.z + 5);
                block(this.x + 10, this.y + this.height - 60, this.z + 15, this.width - 20, 60, 20, 0, 200, 255);
                
                block(this.x + this.width / 4, this.y + this.height - 90, this.z + 10, 30, 30, 30, 240, 200, 90);
                rotateBlock(-60, 0, 0, this.x + 15, this.y + this.height - 60 + 5, this.z + 20);
                rotateBlock(50, 0, 0, 0, this.y + this.height - 60, this.z + 10 + 15);
                
                block(this.x + this.width - 20, this.y + this.height - 60, this.z + 30, 10, 10, 60, 0, 200, 255);
                rotateBlock(0, 70, 0, this.x + this.width - 20 - 5, this.y + this.height - 60, this.z + 10 + 15);
                block(this.x + 10, this.y + this.height - 60, this.z + 30, 10, 10, 60, 0, 200, 255);
                rotateBlock(0, -70, 0, this.x + this.width - 20 - 5, this.y + this.height - 60, this.z + 10 + 15);
                rotateBlock(-60, 0, 0, this.x + this.width / 2, this.y + this.height, this.z + 45, 6);
                
                rotateBlock(-this.yVel * 4 - 20, -this.xVel * 2, 0, this.x + this.width / 2, this.y + this.height / 2, this.z + this.depth / 4, 6);
            }
            else {
                block(this.x + 5, this.ride.y - 10, this.z + 30, 10, 10, 50, 0, 50, 255);
                rotateBlock(0, 20, 0, this.x + 10, this.ride.y - 5, this.z + 30 + 5);
                block(this.x + this.width - 20, this.ride.y - 5, this.z + 30, 10, 10, 50, 0, 50, 255);
                rotateBlock(0, -20, 0, this.x + this.width - 15, this.ride.y - 5, this.z + 5);
                block(this.x + 10, this.ride.y - 60, this.z + 15, this.width - 20, 60, 20, 0, 200, 255);
                
                block(this.x + this.width / 4, this.ride.y - 90, this.z + 10, 30, 30, 30, 240, 200, 90);
                rotateBlock(50, 0, 0, 0, this.ride.y - 60, this.z + 10 + 15);
                
                block(this.x + this.width - 20, this.ride.y - 60, this.z + 30, 10, 10, 60, 0, 200, 255);
                block(this.x + 10, this.ride.y - 60, this.z + 30, 10, 10, 60, 0, 200, 255);
                rotateBlock(-30, 0, 0, this.x + 15, this.ride.y - 60 + 5, this.z + 20, 3);
                rotateBlock(-60, 0, 0, this.x + this.width / 2, this.ride.y, this.z + 45, 6);
                
                rotateBlock(0, -this.xVel * 2, 0, this.ride.x + this.ride.width / 2, this.ride.y - 10, this.z + 30 + this.ride.depth / 4, 6);
            }
            // cam.x = this.x / 4;
            // cam.y = 0;
            cam.z += (this.z + this.depth - cam.z) / 5;
        }
    },
};

// Display Triangle
var dispTri = function(t) {
    if(t.normal !== 1) {
        if(Vdot(look, t.normal) <= 0 && orthographic) {
            return;
        }
        if(!orthographic && Vdot(Vnormalize(Vsub(Vnew(t.ax, t.ay, t.az), Vnew(cam.x, cam.y, cam.z))), t.normal) >= 0) {
            return;
        }
    }
    t.v.x -= cam.x;
    t.v.y -= cam.y;
    t.v.z -= cam.z;
    t.v = yRotate(cam.yaw, t.v.x, t.v.y, t.v.z);
    t.v = xRotate(cam.pitch, t.v.x, t.v.y, t.v.z);
    
    t.v2.x -= cam.x;
    t.v2.y -= cam.y;
    t.v2.z -= cam.z;
    t.v2 = yRotate(cam.yaw, t.v2.x, t.v2.y, t.v2.z);
    t.v2 = xRotate(cam.pitch, t.v2.x, t.v2.y, t.v2.z);
    
    t.v3.x -= cam.x;
    t.v3.y -= cam.y;
    t.v3.z -= cam.z;
    t.v3 = yRotate(cam.yaw, t.v3.x, t.v3.y, t.v3.z);
    t.v3 = xRotate(cam.pitch, t.v3.x, t.v3.y, t.v3.z);
    
    if(t.v.z <= clipStart && t.v2.z <= clipStart && t.v3.z <= clipStart) {
        return;
    }
    
    var d = 1;
    var d2 = 1;
    var d3 = 1;
    if(!orthographic) {
        var d = t.v.z / FOV;
        var d2 = t.v2.z / FOV;
        var d3 = t.v3.z / FOV;
    }
    var shade = 1;
    if(t.normal !== 1) {
        shade = 0;
        shade += constrain(Vdot(t.normal, sun), 0.3, 1);
    }
    fill(t.r * shade, t.g * shade, t.b * shade);
    stroke(t.r * shade, t.g * shade, t.b * shade);
    strokeWeight(1);
    if(t.v.z > clipStart && t.v2.z > clipStart && t.v3.z > clipStart) {
        triangle(t.v.x / d, t.v.y / d, t.v2.x / d2, t.v2.y / d2, t.v3.x / d3, t.v3.y / d3);
    }
    else {
        var clipped = clipTri(t.v.x, t.v.y, t.v.z, t.v2.x, t.v2.y, t.v2.z, t.v3.x, t.v3.y, t.v3.z);
        var d = 1;
        var d2 = 1;
        var d3 = 1;
        if(!orthographic) {
            d = clipped[0].z / FOV;
            d2 = clipped[1].z / FOV;
            d3 = clipped[2].z / FOV;
        }
        if(clipped.length === 3) {
            triangle(clipped[0].x / d, clipped[0].y / d, clipped[1].x / d2, clipped[1].y / d2, clipped[2].x / d3, clipped[2].y / d3);
        }
        else {
            var d4 = 1;
            if(!orthographic) {
                d4 = clipped[3].z / FOV;
            }
            quad(clipped[0].x / d, clipped[0].y / d, clipped[1].x / d2, clipped[1].y / d2, clipped[2].x / d3, clipped[2].y / d3, clipped[3].x / d4, clipped[3].y / d4);
        }
    }
};

// Mouse
var mouseReleased = function() {
    clicked = true;
};

var draw = function() {
    if(s < sn.length) {
        sprites.init(sn[s]);
        s ++;
        return;
    }
    background(255);
    pushMatrix();
    translate(random(-shake, shake), random(-shake, shake));
    shake = max(shake - 1, 0);
    cursor(ARROW);
    switch(scene) {
        case "intro":
            // Intro {
            background(0);
            if(!logoinit) {
                logotx = width / 2;
                logoty = height * 0.3;
                logoy = 0;
                logoyvel = height / 11;
                logo = 0;
                frameCount = 0;
                logoinit = true;
            }
            if(frameCount > 25 && frameCount < 100) {
                logotx *= 0.9;
                logoty *= 0.8;
                image(sprites.logosans, width / 2 - map(sprites.logo.width, 0, 600, 0, width) / 2 - (100 - frameCount) * 30, height * 0.7 - map(sprites.logo.height, 0, 600, 0, height) / 2, map(sprites.logo.width, 0, 600, 0, width), map(sprites.logo.height, 0, 600, 0, height));
                fill(255);
                textAlign(CENTER, CENTER);
                textSize(map(30, 0, 600, 0, width));
                pushMatrix();
                translate(width / 2 - logotx - textWidth("J") / 0.9, height * 0.75 + logoty);
                rotate(logotx);
                scale(2 - logotx / height * 4, 2 - logoty / height * 4);
                text("J", 0, 0);
                popMatrix();
                pushMatrix();
                translate(width / 2 + logotx + textWidth("G") / 0.9, height * 0.75 + logoty);
                rotate(logotx);
                scale(2 - logotx / height * 4, 2 - logoty / height * 0.4);
                text("G", 0, 0);
                popMatrix();
            }
            else if(frameCount > 100) {
                if(frameCount < 120) {
                    background((120 - frameCount) * 255/20);
                }
                
                logo = constrain(logo + 5, 0, 180);
                pushMatrix();
                translate(width / 2 + cos(logo - 90) * 100, height * 0.7);
                rotate(cos(logo - 90) * 25);
                image(sprites.logo, -map(sprites.logo.width, 0, 600, 0, width) / 2, -map(sprites.logo.height, 0, 600, 0, width) / 2, map(sprites.logo.width, 0, 600, 0, width), map(sprites.logo.height, 0, 600, 0, height));
                popMatrix();
                
                if(frameCount > 125) {
                    logoy += logoyvel;
                    logoyvel *= 0.9;
                    
                    textAlign(CENTER, CENTER);
                    textSize(map(30, 0, 600, 0, width));
                    fill(255);
                    text("J E N T A C U L A R   G E N T", width / 2, logoy / 3.4 - 2);
                    textSize(map(15, 0, 600, 0, width));
                    text("presents ...", width / 2, logoy / 3.4 + 40);
                    fill(0, 0, 0);
                    noStroke();
                    rect(0, 0, width, height / 6);
                    if(frameCount >= 250) {
                        fader.fade(10, color(0, 0, 0), "menu");
                    }
                }
            }
            // }
        break;
        case "menu":
            // Created using {
            withAnim += 4;
            background(0);
            fill(255);
            textAlign(CENTER, CENTER);
            textSize(50);
            text("Created with", width / 2 + 2000 / withAnim, height / 3);
            textAlign(CENTER, BOTTOM);
            fill(255, 0, 255);
            textSize(25);
            text("Jentacular Gent's", width / 2 - 2000 / withAnim, height * 7/10 - 35);
            textAlign(CENTER, CENTER);
            fill(255, 150, 0);
            textSize(70);
            text("o c t o r y  ", width / 2 - textWidth("3D") / 2, height * 7/10 - 2000 / withAnim);
            fill(0, 255, 255);
            text("3D", width / 2 + textWidth("o c t o r y  ") / 2, height * 7/10 + 2000 / withAnim);
            textAlign(CENTER, TOP);
            fill(0, 255, 0);
            textSize(25);
            text("engine", width / 2, height * 7/10 + 35);
            // }
            if(withAnim > 500) {
                fader.fade(10, color(0), "game");
            }
        break;
        case "game":
            // Game {
            background(0, 200, 255);
            
            look = xRotate(cam.pitch, 0, 0, 1);
            look = yRotate(cam.yaw, look.x, look.y, look.z);
            look.z = -look.z;
            
            pushMatrix();
            translate(width / 2, height / 2);
            
            /**RASTERIZER**/
            
            tris = [];
            var floorBrightness = 1.15;
            var groundWidth = 900;
            tri(
                Vnew(-groundWidth, ground, -9000 + cam.z + 4000),
                Vnew(groundWidth, ground, -9000 + cam.z + 4000),
                Vnew(-groundWidth, ground, 9000 + cam.z + 4000),
                Vnew(0, -1, 0),
                240 * floorBrightness, 200 * floorBrightness, 90 * floorBrightness
            );
            tri(
                Vnew(groundWidth, ground, 9000 + cam.z + 4000),
                Vnew(groundWidth, ground, -9000 + cam.z + 4000),
                Vnew(-groundWidth, ground, 9000 + cam.z + 4000),
                Vnew(0, -1, 0),
                240 * floorBrightness, 200 * floorBrightness, 90 * floorBrightness
            );
            if(animals.length < 5 && frameCount % 10 === 0) {
                var roll = Math.random() * 40;
                if(roll < 10) {
                    animals.push(new Buffalo());
                    if(started >= 0 || player.dead) {
                        animals[animals.length - 1].z = player.z - 500;
                    }
                }
                else if(roll < 15) {
                    animals.push(new Elephant());
                    if(started >= 0 || player.dead) {
                        animals[animals.length - 1].z = player.z - 600;
                    }
                }
                else if(roll < 18) {
                    animals.push(new Ostrich());
                    if(started >= 0 || player.dead) {
                        animals[animals.length - 1].z = player.z - 500;
                    }
                }
            }
            if(obstacles.length < 3 && (frameCount + 5) % 10 === 0) {
                var roll = Math.random() * 20;
                if(roll < 1 && started < 0) {
                    obstacles.push(new Tree());
                }
                else if(roll < 2 && started < 0) {
                    obstacles.push(new Rock());
                }
            }
            for(var i = obstacles.length - 1; i >= 0; i --) {
                var o = obstacles[i];
                o.display();
                if(o.dead) {
                    obstacles.splice(i, 1);
                }
            }
            for(var i = animals.length - 1; i >= 0; i --) {
                var a = animals[i];
                a.display();
                if(a.dead) {
                    animals.splice(i, 1);
                }
            }
            if(started <= 0) {
                player.display();
                if(started === -1) {
                    cam.z = 0;
                    shake = 0;
                    particles = [];
                    animals = [];
                    obstacles = [];
                    player.riding = 0;
                    started -= 1;
                    animals.push(new Buffalo());
                    animals[animals.length - 1].x = 0;
                    animals[animals.length - 1].z = 0;
                    player.landed = false;
                    player.dead = false;
                    player.riding = animals[animals.length - 1].id;
                    player.y = ground - 1;
                    player.z = 0;
                    player.zVel = animals[animals.length - 1].zVel;
                }
            }
            var mesa = 250;
            var step = 300;
            for(var i = cam.z - 600; i < cam.z + 1500; i += step) {
                var g = Math.round(i / step) * step;
                var w = walls(g);
                var w2 = walls(g + step);
                var n = Vcross(Vnew(0, -1, 0), Vnormalize(Vnew(-(w2[0] - w[0]), 0, -step)));
                tri(
                    Vnew(w[0], ground, g),
                    Vnew(w2[0], ground, g + step),
                    Vnew(w[0], ground - mesa, g),
                    n,
                    240, 200, 90
                );
                tri(
                    Vnew(w2[0], ground - mesa, g + step),
                    Vnew(w2[0], ground, g + step),
                    Vnew(w[0], ground - mesa, g),
                    n,
                    240, 200, 90
                );
                tri(
                    Vnew(w2[0], ground - mesa, g + step),
                    Vnew(w[0], ground - mesa, g),
                    Vnew(-1000, ground - mesa, g),
                    Vnew(0, -1, 0),
                    0, 230, 0
                );
                tri(
                    Vnew(w2[0], ground - mesa, g + step),
                    Vnew(-1000, ground - mesa, g),
                    Vnew(-1000, ground - mesa, g + step),
                    Vnew(0, -1, 0),
                    0, 230, 0
                );
                n = Vcross(Vnew(0, -1, 0), Vnormalize(Vnew((w2[1] - w[1]), 0, step)));
                tri(
                    Vnew(w[1], ground, g),
                    Vnew(w2[1], ground, g + step),
                    Vnew(w[1], ground - mesa, g),
                    n,
                    240, 200, 90
                );
                tri(
                    Vnew(w2[1], ground - mesa, g + step),
                    Vnew(w2[1], ground, g + step),
                    Vnew(w[1], ground - mesa, g),
                    n,
                    240, 200, 90
                );
                tri(
                    Vnew(w2[1], ground - mesa, g + step),
                    Vnew(w[1], ground - mesa, g),
                    Vnew(1000, ground - mesa, g),
                    Vnew(0, -1, 0),
                    0, 230, 0
                );
                tri(
                    Vnew(w2[1], ground - mesa, g + step),
                    Vnew(1000, ground - mesa, g),
                    Vnew(1000, ground - mesa, g + step),
                    Vnew(0, -1, 0),
                    0, 230, 0
                );
            }
            
            // SETUP
            for(var i = 1; i >= 0; i --) {
                var t = tris[i];
                dispTri(t);
            }
            if(!delag) {
                var shadows = 0;
                for(var i = tris.length - 1; i > 1; i --) {
                    var t = tris[i];
                    if(t.normal === 1) {
                        continue;
                    }
                    if(Vdot(t.normal, sun) >= 0) {
                        continue;
                    }
                    var c = cast(t.v, sun);
                    var c2 = cast(t.v2, sun);
                    var c3 = cast(t.v3, sun);
                    
                    tri(c, c2, c3, 1, 120, 100, 45);
                    shadows += 1;
                }
                for(var i = tris.length - 1; i >= tris.length - 1 - shadows; i --) {
                    var t = tris[i];
                    if(t.pv.y !== ground && t.pv2.y !== ground && t.pv3.y !== ground) {
                        continue;
                    }
                    dispTri(t);
                }
            }
            
            // Z-SORT
            tris = tris.sort(function(a, b) {
                return (sqDist(a.ax, a.ay, a.az, cam.x, cam.y, cam.z) - sqDist(b.ax, b.ay, b.az, cam.x, cam.y, cam.z));
                // return a.az - b.az;
            });
            
            for(var i = tris.length - 1; i >= 0; i --) {
                var t = tris[i];
                if(t.pv.y >= ground && t.pv2.y >= ground && t.pv3.y >= ground) {
                    continue;
                }
                dispTri(t);
            }
            
            for(var i = particles.length - 1; i >= 0; i --) {
                var p = particles[i];
                p.display();
                if(p.time >= 255) {
                    particles.splice(i, 1);
                }
            }
            /**RASTERIZER END**/
            
            popMatrix();
            
            if(started < 0) {
            }
            else {
                started += 1;
                textSize(80);
                textAlign(CENTER, CENTER);
                fill(0);
                text("Rodeo\nStampede", width / 2 + 3, height / 3 - 2000 / started + 3);
                fill(255);
                text("Rodeo\nStampede", width / 2, height / 3 - 2000 / started);
                textSize(35);
                fill(0);
                text("Read the top of\nthe code!", width / 2 + 1.7, height * 8/11 + 2000 / started + 1.7);
                fill(240);
                text("Read the top of\nthe code!", width / 2, height * 8/11 + 2000 / started);
                if(mouseIsPressed) {
                    started = -1;
                }
                player.z = 0;
                cam.z = 0;
            }
            if(player.dead) {
                dead += 1;
                textSize(120);
                textAlign(CENTER, CENTER);
                fill(0);
                text("You\nCrashed", width / 2 + 3, height / 2 - 2000 / dead + 3);
                fill(255);
                text("You\nCrashed", width / 2, height / 2 - 2000 / dead);
                fill(0, 255, 0);
                if(rrCol(mouseX, mouseY, 0, 0, 400, 500, 180, 80)) {
                    cursor(HAND);
                    fill(0, 200, 0);
                    if(clicked) {
                        score = 0;
                        dead = 0;
                        player.x = 0;
                        player.y = ground - player.height;
                        player.z = 0;
                        animals = [];
                        particles = [];
                        obstacles = [];
                        started = 0;
                        player.landed = false;
                        player.dead = false;
                    }
                }
                stroke(0);
                strokeWeight(5);
                rect(400 + 1000 / (dead * 1.5), 500, 180, 80, 20);
                textSize(30);
                fill(0);
                text("Retry", 490 + 1000 / (dead * 1.5), 540 + 3);
                fill(255);
                text("Retry", 490 + 1000 / (dead * 1.5), 540);
            }
            fill(255);
            textAlign(LEFT, BOTTOM);
            textSize(30);
            text(Math.round(score) + " m\nHigh " + Math.round(highscore) + " m", 5, height - 5);
            // }
        break;
    }
    popMatrix();
    
    fader.display();
    clicked = false;
};
